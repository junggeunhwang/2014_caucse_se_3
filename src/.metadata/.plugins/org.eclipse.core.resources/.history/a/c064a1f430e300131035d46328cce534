package controller;

import javax.swing.JTree;
import model.TreeNode;
import model.DsmModel;
import java.util.Vector;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.DefaultMutableTreeNode;

public class TreeAction {

	JTree jtree = new JTree();
	DefaultMutableTreeNode root;
	int groupIndex;
	
	Vector<DefaultMutableTreeNode> depthSearch(Vector<DefaultMutableTreeNode> nodes, TreeNode N)
	{
		DefaultMutableTreeNode tr = new DefaultMutableTreeNode(N.key);
		nodes.add(tr);
		nodes.get(groupIndex).add(tr);
		if(N.isGroup()==false)
		{
			return nodes;
		}
		else
		{
			int prevIndex = groupIndex;
			groupIndex = nodes.size()-1;
			for(int i=0; i<N.childs.size();  i++)
			{
				depthSearch(nodes,N.childs.get(i));	
			}
			groupIndex = prevIndex;
		}
		return nodes;
	}
	
	public void treeSetting( DsmModel m)
	{
		Vector<DefaultMutableTreeNode> nodes = new Vector();
		Vector<DefaultMutableTreeNode> tempNodes = new Vector();
		groupIndex =0;
		int size = m.getRootNode().childs.size();
		nodes = depthSearch(nodes, m.getRootNode());
		JTree newTree = new JTree(tempNodes.get(0));
		jtree = newTree;
	}
	
	
	
	
	
}
