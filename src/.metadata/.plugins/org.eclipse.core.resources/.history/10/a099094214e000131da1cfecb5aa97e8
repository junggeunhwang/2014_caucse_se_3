package model;

import java.io.*;
import model.TreeNode;
import java.util.Vector;
import java.util.ArrayList;;
public class DsmModel {
	
	private ArrayList<int[]> dependData;
	private Vector<TreeNode> modules;
	protected TreeNode root;
	
	public DsmModel()
	{
		dependData = new ArrayList<int[]>();
		modules = new Vector<TreeNode>();
		root = new TreeNode();
		root.setKey("$root");
	}
	
	public TreeNode getRootNode()
	{
		return root;
	}
	
	public ArrayList<int[]> getdependData()
	{
		return dependData;
	}
	public Vector<TreeNode> getModules()
	{
		return modules;
	}
	public void setRoot(TreeNode newRoot)
	{
		root = newRoot;
	}
	public void setModules(Vector<TreeNode> newModules)
	{
		modules = newModules;
	}
	
	public void newModule(String newModule, int[] newToExist, int[] existToNew)
	{
		TreeNode newNode = new TreeNode();
		newNode.setKey(newModule);
		newNode.parent = root;
		int insertPoint=root.childs.size();
		for(int i=0; i<root.childs.size(); i++)
		{
			if(root.childs.get(i).childs.size()!=0)
			{
				insertPoint = i;
				break;
			}
		}
		root.childs.insertElementAt(newNode, insertPoint);
		ArrayList<int[]> tempDepend = new ArrayList<int[]>();
		int newSize = dependData.size()+1;
		
		for(int i=0; i<newSize; i++)
		{
			int[] tempRow = new int[newSize];
			if(i<insertPoint)
			{
				for(int j=0; j<newSize; j++)
				{
					if(j<insertPoint)
						tempRow[j] = dependData.get(i)[j];
					else if(j==insertPoint)
						tempRow[j] = existToNew[i];
					else
						tempRow[j] = dependData.get(i)[j-1];
				}
				tempDepend.add(tempRow);
			}
			else if(i==insertPoint)
			{
				for(int j=0; j<newSize; j++)
				{
					if(j<insertPoint)
						tempRow[j] = newToExist[j];
					else if(j==insertPoint)
						tempRow[j] = 0;
					else
						tempRow[j] = newToExist[j-1];
				}
				tempDepend.add(tempRow);
			}
			else
			{
				for(int j=0; j<newSize; j++)
				{
					if(j<insertPoint)
						tempRow[j] = dependData.get(i-1)[j];
					else if(j==insertPoint)
						tempRow[j] = existToNew[i-1];
					else
						tempRow[j] = dependData.get(i-1)[j-1];
				}
				tempDepend.add(tempRow);
			}
		}
		this.dependData = tempDepend;
	}

	public void grouping(String groupName, String[] members)
	{
		int memberSize = members.length;
		TreeNode groupNode = new TreeNode();
		groupNode.setKey(groupName);
		TreeNode[] membersNode = new TreeNode[memberSize];
		for(int i=0; i<members.length; i++)
		{
			membersNode[i] = root.getNode(members[i]);
		}
		root.insertNode(groupNode, membersNode);
		Vector<TreeNode> tempModules = new Vector<TreeNode>();
		Vector<TreeNode> tempModules2 = new Vector<TreeNode>();
		tempModules = root.getLeafNode(tempModules2);
		this.updateDepend(tempModules);
		this.setModules(tempModules);
	}

	public void moveModule(String module, int dir)
	{
		TreeNode moduleNode = new TreeNode();
		moduleNode = root.getNode(module);
		root.reorderChild(moduleNode, dir);
		Vector<TreeNode> tempModules = new Vector<TreeNode>();
		Vector<TreeNode> tempModules2 = new Vector<TreeNode>();
		tempModules = root.getLeafNode(tempModules2);
		updateDepend(tempModules);
		this.setModules(tempModules);
	}
	
	public void updateDepend(Vector<TreeNode> afterModules)
	{
		int dependSize = dependData.size(); 
		ArrayList<int[]> tempDepend = new ArrayList<int[]>(); //최신화 된 dependData를 임시로 저장할 공간
		int[] tempRow = new int[dependSize];
		int[] afterOrderNo = new int[modules.size()];
		for(int i=0; i<dependSize; i++)
		{
			for(int j=0; j<dependSize; j++)
				if(modules.get(i) == afterModules.get(j))
				{
					afterOrderNo[j] = i;
					break;
				}
		}		
		for(int i=0; i<dependSize; i++)
		{
			int[] row = new int[dependSize];
			for(int j=0; j<dependSize; j++)
				row[j] = dependData.get(afterOrderNo[i])[afterOrderNo[j]];
			tempDepend.add(row);
		}
		dependData = tempDepend;
	}
	
	public void readDsm(String filePath)
 	{
		 FileInputStream in = null;
			try
			{
				BufferedReader br = null;
				InputStreamReader isr = null;
				FileInputStream fis = null;
				File file = new File(filePath);
				fis = new FileInputStream(file);
				isr =  new InputStreamReader(fis, "UTF-8"); 
				br = new BufferedReader(isr);
				
				String temp = "";
				temp = br.readLine();
				int pivot = Integer.parseInt(temp);
				int dependency[][] = new int [pivot+1][pivot];
				String module[] = new String [pivot];
				
				int index=0;
				while(((temp = br.readLine()) != null)) 
				{
					 if(index<pivot)
					 {
					    	for(int j=0; j<pivot; j++)
					    	{
					    		dependency[index][j] = Integer.parseInt(temp.substring(2*j, 2*j+1));				    		 
					    	}
					 }
					 else
					 {
						 module[index-pivot] = temp;
					 }
					    index++;
				}
				for(int i=0; i<pivot; i++)
					dependData.add(dependency[i]);
				
				String[] data = new String[2];
				for(int i=0; i<pivot; i++)
				{
					TreeNode newNode = new TreeNode();
					newNode.setKey(module[i]);
					root.setChild(newNode);
				}
				modules = root.getLeafNode(modules);
			}catch(FileNotFoundException fnfe)
			{
				System.out.println("파일을 찾을 수 없습니다.");
			}catch(IOException ioe){}
			
			finally
			{
				try
				{
					in.close();
				}catch(Exception e){}
			}
	}

}
